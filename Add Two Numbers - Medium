You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example 1:
2 --> 4 --> 3
5 --> 6 --> 4
-------------
7 --> 0 --> 8
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

Code:
#include <stdio.h>

int main(){
    int n, m, arr[100], brr[100];
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++){
        scanf("%d", &arr[i]);
    }
    
    for (int j = 0; j < m; j++){
        scanf("%d", &brr[j]);
    }
    
    for (int i = 0; i < n; i++){
        for (int j = i; j <= i; j++){
            int result = arr[i] + brr[j];
            if (result >= 10){
                if (i != (n-1)){
                    result = result % 10; 
                    printf("%d ", result);
                    arr[i+1]++;
                } else {
                    printf("%d ", result / 10);
                }
            } else {    
                printf("%d ", result);
            }   
        }
    }
    
    return 0;
}

